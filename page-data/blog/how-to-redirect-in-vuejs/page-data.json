{
    "componentChunkName": "component---src-templates-post-template-js",
    "path": "/blog/how-to-redirect-in-vuejs/",
    "result": {"data":{"markdownRemark":{"excerpt":"Hi Friends üëã, Welcome To SortoutCode! ‚ù§Ô∏è To redirect from a page to another page in VueJS. We are going to use the  module. By using the  we are going to‚Ä¶","html":"<p>Hi Friends üëã,</p>\n<p>Welcome To SortoutCode! ‚ù§Ô∏è</p>\n<p>To redirect from a page to another page in VueJS. We are going to use the <code class=\"language-text\">vue-router</code> module. By using the <code class=\"language-text\">vue-router</code> we are going to define some route and then using these <code class=\"language-text\">this.$router.push()</code>, <code class=\"language-text\">this.$router.replace()</code>, and <code class=\"language-text\">window.location.href</code> we are going to redirect.</p>\n<h2>Short solution</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nwindow<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Today, I am going to show you <strong>How you convert the object to a string in VueJS?</strong></p>\n<p>Table of Content</p>\n<ul>\n<li>Setup the Vue (Optional)</li>\n<li>Create FirstComponent.vue and import it into App.js</li>\n<li>Redirect using Vue Router</li>\n<li>Redirect using the <code class=\"language-text\">window.location</code> object</li>\n</ul>\n<p>This article will guide you to <strong>How do I convert the object to array in vueJS</strong></p>\n<h2>Setup the Vue.js</h2>\n<p>First, we have to install the Vue project, I had installed the vueJS in my system. If you haven‚Äôt installed or have any problem with installation you can follow this article, it will show you step by step process of installation.</p>\n<p><a href=\"/blog/how-to-setup-vuejs-project/\" target=\"_BLANK\">How to Install the VueJS project?</a></p>\n<h2>Create FirstComponent.vue and import it into App.js</h2>\n<p>Create the new component in the <code class=\"language-text\">src/components/</code> components folder. The component name is <code class=\"language-text\">FirstComponent.vue</code> and imported into the <code class=\"language-text\">App.js</code> file:</p>\n<p><code class=\"language-text\">App.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>FirstComp <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span>\n\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n<span class=\"token keyword\">import</span> FirstComp <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/FirstComp.vue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"App\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">FirstComp</span><span class=\"token operator\">:</span> FirstComp<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></code></pre></div>\n<h2>Redirect using Vue Router</h2>\n<p>First, we need to install the <code class=\"language-text\">vue-router</code> in our project. To install the latest version of <code class=\"language-text\">vue-router</code> for <code class=\"language-text\">npm</code> we are going to use this command</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  npm install vue<span class=\"token operator\">-</span>router@<span class=\"token number\">4</span></code></pre></div>\n<p>and for the <code class=\"language-text\">yarn</code>, we can use this command.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  yarn install vue<span class=\"token operator\">-</span>router@<span class=\"token number\">4</span></code></pre></div>\n<p>To setup the router and create the routes, you can follow this article this will guide you step by step</p>\n<p><a href=\"/blog/how-to-configure-or-install-vue-router-module-in-vuejs/\" target=\"_BLANK\">How to configure or Install the <code class=\"language-text\">vue-router</code> module in VueJS?</a></p>\n<h3>Redirect using router.push() method</h3>\n<p>To redirect the user to the new router, we are going to use <code class=\"language-text\">this.$router.push()</code> method. This method will push the new entry to the history stack and then navigate to the new route. </p>\n<p><code class=\"language-text\">FirstComp.vue</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/next-route'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the above example, we are pushing the new entry to the history stack and navigating to the <code class=\"language-text\">/next-route</code> route. In the above example <code class=\"language-text\">this.$router</code> is the reference to the router instance and automatically injects every Vue component.</p>\n<h3>Redirect using router.replace() method</h3>\n<p>To redirect the user to the new router, we are going to use <code class=\"language-text\">this.$router.replace()</code> method. This method will replace the current route in the history stack with a new route. If we want to prevent the user to go back to the <code class=\"language-text\">previous route</code>, then we can use this method.</p>\n<p><code class=\"language-text\">FirstComp.vue</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/next-route'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Redirect using the <code class=\"language-text\">window.location</code> object</h2>\n<p>There is another way to redirect the user using the <code class=\"language-text\">window.location</code> object. Using this object we can access the current URL, and also we can set the new URL, and redirect the user to the new page.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"/new-route\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the above example, we are going to set the <code class=\"language-text\">href</code> property of the <code class=\"language-text\">window.location</code> object to <code class=\"language-text\">/new-route</code>. Because of this Browser will navigate to the <code class=\"language-text\">/new-route</code> link.</p>\n<p>All the best üëç.</p>","frontmatter":{"title":"How to redirect in VueJS?","tags":["Vue"],"date":"July 30, 2023","description":"Example of redirecting from one page to another page step by step in VueJS - sortoutcode","social_image":""}},"prev":null,"next":{"frontmatter":{"title":"How to store multiple strings in an array in VueJS?"},"fields":{"slug":"/blog/how-to-store-multiple-strings-in-an-array-in-vuejs/"}}},"pageContext":{"slug":"/blog/how-to-redirect-in-vuejs/","prevSlug":null,"nextSlug":"/blog/how-to-store-multiple-strings-in-an-array-in-vuejs/"}},
    "staticQueryHashes": ["2555585279","2714594843","3159585216"]}